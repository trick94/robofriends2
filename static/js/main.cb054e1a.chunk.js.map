{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","constants.js","containers/App.jsx","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","CHANGE_SEARCHFIELLD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","connect","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","text","target","value","payload","onRequestRobots","fetch","then","response","json","data","catch","useEffect","filteredRobots","filter","robot","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cb054e1a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n    return (\n        <div className=\"bg-light-green dib br3 pa3 ma2 grow shadow-5 tc\">\n            <img alt='robots' src={`https://robohash.org/${id}?set=set3`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name = {robots[i].name}\n                            email={robots[i].email\n                        }/>\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops. That is not good</h1>\n        }\n\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundry;","export const CHANGE_SEARCHFIELLD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { useEffect } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport { requestRobots, setSearchField } from '../actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n  }\n}\n\nfunction App({ searchField, robots, isPending, onSearchChange, onRequestRobots }) {\n  useEffect(() => {\n      onRequestRobots();\n  }, [onRequestRobots])\n\n  const filteredRobots = robots.filter(robot => {\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  if (isPending) {\n    return <h1>Loading</h1>\n  } else {\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots}/>\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCHFIELLD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELLD,\n    payload: text\n})\n\nexport const requestRobots = (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { CHANGE_SEARCHFIELLD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nconst initialStateSearch = {\n    searchField: '',\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELLD:\n            return { ...state, searchField: action.payload };\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state,  isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false };\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false };\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { applyMiddleware, createStore, combineReducers } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducers = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App/>\n      </Provider>\n    </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}